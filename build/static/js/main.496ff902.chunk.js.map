{"version":3,"sources":["services/contacts.js","add-contact.js","contact-filter.js","show-contacts.js","success-alert.js","App.js","index.js"],"names":["baseUrl","contacts","getAll","axios","get","create","newPerson","post","update","id","put","concat","del","delete","AddContact","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createContact","newContact","contactsSerive","then","res","updateContacts","data","handleAddPerson","event","preventDefault","name","state","newName","number","newNumber","personWithSameName","find","person","window","confirm","updatedContact","updatedContacts","map","contact","objectSpread","addSuccessAlert","catch","err","setState","handleNameChange","target","value","handleNumberChange","react_default","a","createElement","onSubmit","onChange","type","React","Component","ContactFilter","_ref","changeContactFilter","ShowContacts","deleteContact","contactsService","_this2","length","filteredContacts","filter","toUpperCase","includes","key","onClick","SuccessAlert","message","className","App","contactFilter","successAlertMessage","setTimeout","success_alert","contact_filter","bind","add_contact","show_contacts","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.496ff902.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newPerson => {\n  return axios.post(baseUrl, newPerson)\n}\n\nconst update = (id, newPerson) => {\n  return axios.put(`${baseUrl}/${id}`, newPerson)\n}\n\nconst del = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, del }\n","import React from 'react'\nimport contactsSerive from './services/contacts'\n\nclass AddContact extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newName: '',\n      newNumber: ''\n    }\n    this.updateContacts = this.props.updateContacts\n  }\n\n  createContact = newContact => {\n    return contactsSerive.create(newContact).then(res => {\n      this.updateContacts(this.props.contacts.concat(res.data))\n    })\n  }\n\n  handleAddPerson = event => {\n    event.preventDefault()\n    const newContact = {\n      name: this.state.newName,\n      number: this.state.newNumber\n    }\n    const personWithSameName = this.props.contacts.find(\n      person => person.name === newContact.name\n    )\n    if (!personWithSameName) {\n      this.createContact(newContact).then(() => {\n        this.props.addSuccessAlert(`lisättiin ${newContact.name}`)\n      })\n    } else {\n      if (\n        window.confirm(\n          `${newContact.name} on jo luettelossa, korvataanko numero uudella?`\n        )\n      ) {\n        const updatedContact = {\n          name: newContact.name,\n          number: newContact.number,\n          id: personWithSameName.id\n        }\n        contactsSerive\n          .update(personWithSameName.id, updatedContact)\n          .then(res => {\n            const updatedContacts = this.props.contacts.map(contact =>\n              contact.id === personWithSameName.id\n                ? { ...contact, number: newContact.number }\n                : contact\n            )\n            this.updateContacts(updatedContacts)\n            this.props.addSuccessAlert(`muokattiin ${newContact.name}`)\n          })\n          .catch(err => {\n            this.createContact(updatedContact)\n          })\n      }\n    }\n    this.setState({\n      newName: '',\n      newNumber: ''\n    })\n  }\n\n  handleNameChange = event => {\n    this.setState({ newName: event.target.value })\n  }\n\n  handleNumberChange = event => {\n    this.setState({ newNumber: event.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Lisää uusi</h2>\n        <form onSubmit={this.handleAddPerson}>\n          <div>\n            nimi:{' '}\n            <input\n              value={this.state.newName}\n              onChange={this.handleNameChange}\n            />\n          </div>\n          <div>\n            numero:{' '}\n            <input\n              value={this.state.newNumber}\n              onChange={this.handleNumberChange}\n            />\n          </div>\n          <div>\n            <button type=\"submit\">lisää</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddContact\n","import React from 'react'\n\nconst ContactFilter = ({ changeContactFilter }) => (\n  <div>\n    rajaa näytettäviä: <input onChange={changeContactFilter} />\n  </div>\n)\n\nexport default ContactFilter","import React from 'react'\nimport contactsService from './services/contacts'\n\nclass ShowContacts extends React.Component {\n\n  deleteContact = contact => {\n    if (window.confirm(`poisetaanko ${contact.name}`))\n      contactsService.del(contact.id).then(() => {\n        contactsService.getAll().then(res => {\n          this.props.updateContacts(res.data)\n        })\n      })\n  }\n\n  render() {\n    if (this.props.contacts.length === 0) {\n      return <p>Puhelinluettelo on tyhjä.</p>\n    }\n\n    const filteredContacts = this.props.contacts.filter(contact =>\n      contact.name.toUpperCase().includes(this.props.filter.toUpperCase())\n    )\n\n    return (\n      <div>\n        <h2>Numerot</h2>\n        {filteredContacts.map(person => (\n          <div key={person.id}>\n            {person.name} {person.number}\n            <button onClick={() => this.deleteContact(person)}>poista</button>\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default ShowContacts\n","import React from 'react'\n\nconst SuccessAlert = ({ message }) => {\n  return <div className=\"success-alert\">{message}</div>\n}\n\nexport default SuccessAlert\n","import React from 'react'\nimport AddContact from './add-contact'\nimport ContactFilter from './contact-filter'\nimport ShowContacts from './show-contacts'\nimport SuccessAlert from './success-alert'\nimport contactsService from './services/contacts'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      contacts: [],\n      contactFilter: '',\n      successAlertMessage: null\n    }\n  }\n\n  componentDidMount() {\n    contactsService.getAll().then(res => {\n      this.setState({ contacts: res.data })\n    })\n  }\n\n  updateContacts = contacts => {\n    this.setState({ contacts })\n  }\n\n  changeContactFilter = event => {\n    this.setState({ contactFilter: event.target.value })\n  }\n\n  addSuccessAlert = successAlertMessage => {\n    this.setState({ successAlertMessage })\n    setTimeout(() => {\n      this.setState({ successAlertMessage: null })\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n        {this.state.successAlertMessage && (\n          <SuccessAlert message={this.state.successAlertMessage} />\n        )}\n        <ContactFilter\n          changeContactFilter={this.changeContactFilter.bind(this)}\n        />\n        <AddContact\n          contacts={this.state.contacts}\n          updateContacts={this.updateContacts.bind(this)}\n          addSuccessAlert={this.addSuccessAlert.bind(this)}\n        />\n        <ShowContacts\n          contacts={this.state.contacts}\n          filter={this.state.contactFilter}\n          updateContacts={this.updateContacts.bind(this)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}